{"version":3,"file":"knockout-ctl.min.js","sources":["knockout-ctl.js"],"names":["root","factory","define","amd","ko","Error","koComponentTemplateLoader","this","createValueAccessor","obj","registerComponentBinding","loader","bindingHandlers","init","element","valueAccessor","allBindings","deprecated","bindingContext","value","name","params","subComponent","unwrap","getSubComponent","componentBinding","overrideRegisterMethod","components","register","componentName","config","subComponents","viewModel","template","registerDiscriminator","utils","objectForEach","prop","defaultLoader","getConfig","loadComponent","loadTemplate","loadViewModel","discriminator","discriminators","splice"],"mappings":"CAGC,SAAUA,EAAMC,GACb,GAAsB,kBAAXC,SAAyBA,OAAOC,IACvCD,OAAO,gBAAiB,YAAaD,OAClC,CACH,GAAsB,mBAAZD,GAAKI,GACX,KAAM,IAAIC,OAAM,2CAEpBL,GAAKM,0BAA4BL,EAAQD,EAAKI,MAEpDG,KAAM,SAAUH,GACd,YAaA,SAASI,GAAoBC,GACzB,MAAO,YACH,MAAOA,IAQf,QAASC,GAAyBC,GAC9BP,EAAGQ,gBAA2B,WAC1BC,KAAQ,SAAUC,EAASC,EAAeC,EAAaC,EAAYC,GAC/D,GAAIC,GAAOC,EAAMC,EAAQC,CAczB,OAZAH,GAAQf,EAAGmB,OAAOR,KACG,gBAAVI,GACPC,EAAOD,GAEPC,EAAOhB,EAAGmB,OAAOJ,EAAY,MAC7BE,EAASjB,EAAGmB,OAAOJ,EAAc,SAGrCG,EAAeX,EAAOa,gBAAgBJ,EAAMC,GACxCC,IACAF,EAAOA,EAAO,IAAME,GAEjBG,EAAiBZ,KAAKC,EAASN,GAClCY,KAAMA,EACNC,OAAQA,IACRL,EAAaC,EAAYC,KASzC,QAASQ,GAAuBf,GAC5BP,EAAGuB,WAAWC,SAAW,SAAUC,EAAeC,GAC9C,MAAIA,GAAOC,eAGPH,EAASC,GAAgBG,aAAeC,SAAU,KAGlDtB,EAAOuB,sBAAsBL,EAAeC,EAAON,qBAGnDpB,GAAG+B,MAAMC,cAAcN,EAAOC,cAAe,SAAUM,EAAMlB,GAI1B,mBAApBA,GAAMa,WAA6BF,EAAOE,YACjDb,EAAMa,UAAYF,EAAOE,WAE7BJ,EAASC,EAAgB,IAAMQ,EAAMlB,UAM7CS,GAASC,EAAeC,IAzEhC,GAAIL,GAAmBrB,EAAGQ,gBAA2B,UACjDgB,EAAWxB,EAAGuB,WAAWC,SACzBU,EAAgBlC,EAAGuB,WAAWW,cAC9B3B,IA4GJ,OAjCAA,GAAO4B,UAAYD,EAAcC,UACjC5B,EAAO6B,cAAgBF,EAAcE,cACrC7B,EAAO8B,aAAeH,EAAcG,aACpC9B,EAAO+B,cAAgBJ,EAAcI,cAQrC/B,EAAOa,gBAAkB,SAAUK,EAAeR,GAC9C,GAAIsB,GAAgBpC,KAAKqC,eAAef,EACxC,OAAOc,IAAiBA,EAActB,IAS1CV,EAAOuB,sBAAwB,SAAUL,EAAec,GACpDpC,KAAKqC,eAAiBrC,KAAKqC,mBAC3BrC,KAAKqC,eAAef,GAAiBc,GAGzCjC,EAAyBC,GACzBe,EAAuBf,GAGvBP,EAAGuB,WAAoB,QAAEkB,OAAO,EAAG,EAAGlC,GAE/BA","sourcesContent":["/**\r\n * Knockout Component Template Loader (knockout-ctl)\r\n */\r\n(function (root, factory) {\r\n    if (typeof define === 'function' && define.amd) {\r\n        define('knockout-ctl', ['knockout'], factory);\r\n    } else {\r\n        if(typeof root.ko === 'undefined') {\r\n            throw new Error('knockoutjs is required for knockout-ctl.');\r\n        }\r\n        root.koComponentTemplateLoader = factory(root.ko);\r\n    }\r\n}(this, function (ko) {\r\n    'use strict';\r\n\r\n    /** Get Existing Knockout stuff */\r\n    var componentBinding = ko.bindingHandlers['component'],\r\n        register = ko.components.register,\r\n        defaultLoader = ko.components.defaultLoader,\r\n        loader = {};\r\n\r\n    /**\r\n     * Utility function to create a valueAccessor\r\n     * @param obj\r\n     * @returns {Function}\r\n     */\r\n    function createValueAccessor(obj) {\r\n        return function () {\r\n            return obj;\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Overrides knockout's component binding, creating the opportunity for our loader to intercept first\r\n     * @param loader - an instantiated knockout-ctl loader\r\n     */\r\n    function registerComponentBinding(loader) {\r\n        ko.bindingHandlers['component'] = {\r\n            'init': function (element, valueAccessor, allBindings, deprecated, bindingContext) {\r\n                var value, name, params, subComponent;\r\n\r\n                value = ko.unwrap(valueAccessor());\r\n                if (typeof value === 'string') {\r\n                    name = value;\r\n                } else {\r\n                    name = ko.unwrap(value['name']);\r\n                    params = ko.unwrap(value['params']);\r\n                }\r\n\r\n                subComponent = loader.getSubComponent(name, params);\r\n                if (subComponent) {\r\n                    name = name + '!' + subComponent;\r\n                }\r\n                return componentBinding.init(element, createValueAccessor({\r\n                    name: name,\r\n                    params: params\r\n                }), allBindings, deprecated, bindingContext);\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Overrides knockout's components.register method to intercept and register subComponents\r\n     * @param loader\r\n     */\r\n    function overrideRegisterMethod(loader) {\r\n        ko.components.register = function (componentName, config) {\r\n            if (config.subComponents) {\r\n\r\n                // Register a dummy component so KO won't barf\r\n                register(componentName, {viewModel: {}, template: ''});\r\n\r\n                // Register subComponent discriminator for this component\r\n                loader.registerDiscriminator(componentName, config.getSubComponent);\r\n\r\n                // Register each sub-component\r\n                ko.utils.objectForEach(config.subComponents, function (prop, value) {\r\n\r\n                    // We can optionally provide one viewModel definition, or provide one for\r\n                    // each subcomponent\r\n                    if (typeof value.viewModel === 'undefined' && config.viewModel) {\r\n                        value.viewModel = config.viewModel;\r\n                    }\r\n                    register(componentName + '!' + prop, value);\r\n                });\r\n                return;\r\n            }\r\n\r\n            // if it wasn't a sub-componenty component, let KO handle it\r\n            register(componentName, config);\r\n        };\r\n    }\r\n\r\n    // Set our loader to be use knockout's defaults */\r\n    loader.getConfig = defaultLoader.getConfig;\r\n    loader.loadComponent = defaultLoader.loadComponent;\r\n    loader.loadTemplate = defaultLoader.loadTemplate;\r\n    loader.loadViewModel = defaultLoader.loadViewModel;\r\n\r\n    /**\r\n     * Gets a subComponent configuration\r\n     * @param componentName - The parent component name\r\n     * @param params - The parameters being passed to the component\r\n     * @returns {*} - A valid component configuration: { viewModel, template }\r\n     */\r\n    loader.getSubComponent = function (componentName, params) {\r\n        var discriminator = this.discriminators[componentName];\r\n        return discriminator && discriminator(params);\r\n    };\r\n\r\n    /**\r\n     * Registers a handler that will find the correct subComponent - handler\r\n     * is used by getSubComponent later\r\n     * @param componentName - The parent component name\r\n     * @param discriminator - The subComponent finding function\r\n     */\r\n    loader.registerDiscriminator = function (componentName, discriminator) {\r\n        this.discriminators = this.discriminators || {};\r\n        this.discriminators[componentName] = discriminator;\r\n    };\r\n\r\n    registerComponentBinding(loader);\r\n    overrideRegisterMethod(loader);\r\n\r\n    // Insert our loader to be the first checked\r\n    ko.components['loaders'].splice(0, 0, loader);\r\n\r\n    return loader;\r\n}));"]}